/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { AreAllOptional, MutationFiltersByMutationKey, MutationFiltersByParameters, MutationVariables, RequestFnResponse, ServiceOperationMutationFnOptions, ServiceOperationMutationKey, ServiceOperationUseMutationOptions } from "@openapi-qraft/tanstack-query-react-types";
import type { UseMutationResult } from "@tanstack/react-query";
import type { Mutation, MutationState } from "@tanstack/query-core";
export interface AuthService {
    /** @summary Request Pin */
    requestPinAuthPinPost: {
        /** @summary Request Pin */
        getMutationKey(parameters: RequestPinAuthPinPostParameters | void): ServiceOperationMutationKey<RequestPinAuthPinPostSchema, RequestPinAuthPinPostParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestPinAuthPinPost.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestPinAuthPinPost.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends RequestPinAuthPinPostBody, TContext = unknown>(parameters: RequestPinAuthPinPostParameters, options?: ServiceOperationUseMutationOptions<RequestPinAuthPinPostSchema, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, TVariables, RequestPinAuthPinPostError | Error, TContext>): UseMutationResult<RequestPinAuthPinPostData, RequestPinAuthPinPostError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestPinAuthPinPost.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestPinAuthPinPost.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<RequestPinAuthPinPostBody, RequestPinAuthPinPostParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<RequestPinAuthPinPostSchema, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, TVariables, RequestPinAuthPinPostError | Error, TContext>): UseMutationResult<RequestPinAuthPinPostData, RequestPinAuthPinPostError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Request Pin
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const requestPinAuthPinPostTotal = qraft.authService.requestPinAuthPinPost.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const requestPinAuthPinPostTotal = qraft.authService.requestPinAuthPinPost.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext> | MutationFiltersByMutationKey<RequestPinAuthPinPostSchema, RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext>): number;
        /** @summary Request Pin */
        isMutating<TContext>(filters?: MutationFiltersByParameters<RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext> | MutationFiltersByMutationKey<RequestPinAuthPinPostSchema, RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext>): number;
        /** @summary Request Pin */
        (options: ServiceOperationMutationFnOptions<RequestPinAuthPinPostBody, RequestPinAuthPinPostParameters>, client?: (schema: RequestPinAuthPinPostSchema, options: ServiceOperationMutationFnOptions<RequestPinAuthPinPostBody, RequestPinAuthPinPostParameters>) => Promise<RequestFnResponse<RequestPinAuthPinPostData, RequestPinAuthPinPostError>>): Promise<RequestFnResponse<RequestPinAuthPinPostData, RequestPinAuthPinPostError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Request Pin
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const requestPinAuthPinPostPendingMutationVariables = qraft.authService.requestPinAuthPinPost.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const requestPinAuthPinPostMutationData = qraft.authService.requestPinAuthPinPost.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<RequestPinAuthPinPostData, RequestPinAuthPinPostError | Error, MutationVariables<RequestPinAuthPinPostBody, RequestPinAuthPinPostParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext> | MutationFiltersByMutationKey<RequestPinAuthPinPostSchema, RequestPinAuthPinPostBody, RequestPinAuthPinPostData, RequestPinAuthPinPostParameters, RequestPinAuthPinPostError | Error, TContext>;
            select?: (mutation: Mutation<RequestPinAuthPinPostData, RequestPinAuthPinPostError | Error, MutationVariables<RequestPinAuthPinPostBody, RequestPinAuthPinPostParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: RequestPinAuthPinPostSchema;
        types: {
            parameters: RequestPinAuthPinPostParameters;
            data: RequestPinAuthPinPostData;
            error: RequestPinAuthPinPostError;
            body: RequestPinAuthPinPostBody;
        };
    };
    /** @summary Request Session */
    requestSessionAuthSessiontokenPost: {
        /** @summary Request Session */
        getMutationKey(parameters: RequestSessionAuthSessiontokenPostParameters | void): ServiceOperationMutationKey<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestSessionAuthSessiontokenPost.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestSessionAuthSessiontokenPost.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends RequestSessionAuthSessiontokenPostBody, TContext = unknown>(parameters: RequestSessionAuthSessiontokenPostParameters, options?: ServiceOperationUseMutationOptions<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, TVariables, RequestSessionAuthSessiontokenPostError | Error, TContext>): UseMutationResult<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestSessionAuthSessiontokenPost.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.authService.requestSessionAuthSessiontokenPost.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, TVariables, RequestSessionAuthSessiontokenPostError | Error, TContext>): UseMutationResult<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Request Session
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const requestSessionAuthSessiontokenPostTotal = qraft.authService.requestSessionAuthSessiontokenPost.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const requestSessionAuthSessiontokenPostTotal = qraft.authService.requestSessionAuthSessiontokenPost.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext> | MutationFiltersByMutationKey<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext>): number;
        /** @summary Request Session */
        isMutating<TContext>(filters?: MutationFiltersByParameters<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext> | MutationFiltersByMutationKey<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext>): number;
        /** @summary Request Session */
        (options: ServiceOperationMutationFnOptions<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostParameters>, client?: (schema: RequestSessionAuthSessiontokenPostSchema, options: ServiceOperationMutationFnOptions<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostParameters>) => Promise<RequestFnResponse<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError>>): Promise<RequestFnResponse<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Request Session
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const requestSessionAuthSessiontokenPostPendingMutationVariables = qraft.authService.requestSessionAuthSessiontokenPost.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const requestSessionAuthSessiontokenPostMutationData = qraft.authService.requestSessionAuthSessiontokenPost.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError | Error, MutationVariables<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext> | MutationFiltersByMutationKey<RequestSessionAuthSessiontokenPostSchema, RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostParameters, RequestSessionAuthSessiontokenPostError | Error, TContext>;
            select?: (mutation: Mutation<RequestSessionAuthSessiontokenPostData, RequestSessionAuthSessiontokenPostError | Error, MutationVariables<RequestSessionAuthSessiontokenPostBody, RequestSessionAuthSessiontokenPostParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: RequestSessionAuthSessiontokenPostSchema;
        types: {
            parameters: RequestSessionAuthSessiontokenPostParameters;
            data: RequestSessionAuthSessiontokenPostData;
            error: RequestSessionAuthSessiontokenPostError;
            body: RequestSessionAuthSessiontokenPostBody;
        };
    };
}
export const authService: {
    /** @summary Request Pin */
    requestPinAuthPinPost: {
        schema: {
            method: "post";
            url: "/auth/pin";
            mediaType: [
                "application/json"
            ];
        };
    };
    /** @summary Request Session */
    requestSessionAuthSessiontokenPost: {
        schema: {
            method: "post";
            url: "/auth/sessiontoken";
            mediaType: [
                "application/json"
            ];
        };
    };
} = {
    requestPinAuthPinPost: {
        schema: {
            method: "post",
            url: "/auth/pin",
            mediaType: ["application/json"]
        }
    },
    requestSessionAuthSessiontokenPost: {
        schema: {
            method: "post",
            url: "/auth/sessiontoken",
            mediaType: ["application/json"]
        }
    }
};
type RequestPinAuthPinPostSchema = {
    method: "post";
    url: "/auth/pin";
    mediaType: [
        "application/json"
    ];
};
type RequestPinAuthPinPostParameters = {};
type RequestPinAuthPinPostData = paths["/auth/pin"]["post"]["responses"]["201"]["content"]["application/json"];
type RequestPinAuthPinPostError = paths["/auth/pin"]["post"]["responses"]["422"]["content"]["application/json"];
type RequestPinAuthPinPostBody = NonNullable<paths["/auth/pin"]["post"]["requestBody"]>["content"]["application/json"];
type RequestSessionAuthSessiontokenPostSchema = {
    method: "post";
    url: "/auth/sessiontoken";
    mediaType: [
        "application/json"
    ];
};
type RequestSessionAuthSessiontokenPostParameters = {};
type RequestSessionAuthSessiontokenPostData = paths["/auth/sessiontoken"]["post"]["responses"]["201"]["content"]["application/json"];
type RequestSessionAuthSessiontokenPostError = paths["/auth/sessiontoken"]["post"]["responses"]["422"]["content"]["application/json"];
type RequestSessionAuthSessiontokenPostBody = NonNullable<paths["/auth/sessiontoken"]["post"]["requestBody"]>["content"]["application/json"];
