/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { AreAllOptional, InvalidateQueryFilters, MutationFiltersByMutationKey, MutationFiltersByParameters, MutationVariables, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationMutationFnOptions, ServiceOperationMutationKey, ServiceOperationQueryKey, ServiceOperationUseMutationOptions, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, Mutation, MutationState, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseMutationResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface OrganizationsService {
    /** @summary Get Organizations */
    listOrganizations: {
        /** @summary Get Organizations */
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>, options?: CancelOptions): Promise<void>;
        /** @summary Get Organizations */
        getQueryKey(parameters: ListOrganizationsParameters | void): ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get Organizations
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.organizationsService.listOrganizations.useQuery()
         * ```
         */
        useQuery<TData = ListOrganizationsData>(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options?: Omit<UndefinedInitialDataOptions<ListOrganizationsData, ListOrganizationsError, TData, ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>>, "queryKey">): UseQueryResult<TData, ListOrganizationsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get Organizations
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.organizationsService.listOrganizations.useQuery()
         * ```
         */
        useQuery<TData = ListOrganizationsData>(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options: Omit<DefinedInitialDataOptions<ListOrganizationsData, ListOrganizationsError, TData, ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>>, "queryKey">): DefinedUseQueryResult<TData, ListOrganizationsError | Error>;
        /** @summary Get Organizations */
        fetchInfiniteQuery<TPageParam extends ListOrganizationsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, TPageParam, ListOrganizationsError>): Promise<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>>;
        /** @summary Get Organizations */
        prefetchInfiniteQuery<TPageParam extends ListOrganizationsParameters>(options: ServiceOperationFetchInfiniteQueryOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, TPageParam, ListOrganizationsError>): Promise<void>;
        /** @summary Get Organizations */
        ensureInfiniteQueryData<TPageParam extends ListOrganizationsParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, TPageParam, ListOrganizationsError>): Promise<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>>;
        /** @summary Get Organizations */
        fetchQuery(options: ServiceOperationFetchQueryOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, ListOrganizationsError> | void): Promise<ListOrganizationsData>;
        /** @summary Get Organizations */
        prefetchQuery(options: ServiceOperationFetchQueryOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, ListOrganizationsError> | void): Promise<void>;
        /** @summary Get Organizations */
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<ListOrganizationsSchema, ListOrganizationsData, ListOrganizationsParameters, ListOrganizationsError> | void): Promise<ListOrganizationsData>;
        /** @summary Get Organizations */
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void)): OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters> | undefined;
        /** @summary Get Organizations */
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>,
            data: NoInfer<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>,
            data: ListOrganizationsData | undefined
        ]>;
        /** @summary Get Organizations */
        getQueryData(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void)): ListOrganizationsData | undefined;
        /** @summary Get Organizations */
        getQueryState(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void)): QueryState<ListOrganizationsData, ListOrganizationsError> | undefined;
        /** @summary Get Organizations */
        getInfiniteQueryState(parameters: ListOrganizationsParameters | ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | void): QueryState<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>, ListOrganizationsError> | undefined;
        /** @summary Get Organizations */
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>, options?: InvalidateOptions): Promise<void>;
        /** @summary Get Organizations */
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>): number;
        /** @summary Get Organizations */
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<ListOrganizationsSchema, ListOrganizationsParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<ListOrganizationsParameters, TMeta, TSignal> | void), client?: (schema: ListOrganizationsSchema, options: {
            parameters: ListOrganizationsParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<ListOrganizationsData, ListOrganizationsError>>): Promise<RequestFnResponse<ListOrganizationsData, ListOrganizationsError>>;
        /** @summary Get Organizations */
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>, options?: RefetchOptions): Promise<void>;
        /** @summary Get Organizations */
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>): void;
        /** @summary Get Organizations */
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>, options?: ResetOptions): Promise<void>;
        /** @summary Get Organizations */
        setInfiniteQueryData(parameters: ListOrganizationsParameters | ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>, updater: Updater<NoInfer<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>> | undefined, NoInfer<OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<ListOrganizationsData, ListOrganizationsParameters> | undefined;
        /** @summary Get Organizations */
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>, updater: Updater<NoInfer<ListOrganizationsData> | undefined, NoInfer<ListOrganizationsData> | undefined>, options?: SetDataOptions): Array<ListOrganizationsData | undefined>;
        /** @summary Get Organizations */
        setQueryData(parameters: (ListOrganizationsParameters | undefined) | ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>, updater: Updater<NoInfer<ListOrganizationsData> | undefined, NoInfer<ListOrganizationsData> | undefined>, options?: SetDataOptions): ListOrganizationsData | undefined;
        /** @summary Get Organizations */
        getInfiniteQueryKey(parameters: ListOrganizationsParameters | void): ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.organizationsService.listOrganizations.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends ListOrganizationsParameters, TQueryFnData = ListOrganizationsData, TData = OperationInfiniteData<TQueryFnData, ListOrganizationsParameters>>(parameters: ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, ListOrganizationsError, TData, ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<TData, ListOrganizationsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.organizationsService.listOrganizations.useInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends ListOrganizationsParameters, TQueryFnData = ListOrganizationsData, TData = OperationInfiniteData<TQueryFnData, ListOrganizationsParameters>>(parameters: ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, ListOrganizationsError, TData, ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<ListOrganizationsData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<TData, ListOrganizationsError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const listOrganizationsTotal = qraft.organizationsService.listOrganizations.useIsFetching()
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError> | QueryFiltersByQueryKey<ListOrganizationsSchema, ListOrganizationsData, TInfinite, ListOrganizationsParameters, ListOrganizationsError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @summary Get Organizations
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const listOrganizationsResults = qraft.organizationsService.listOrganizations.useQueries({
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * listOrganizationsResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const listOrganizationsCombinedResults = qraft.organizationsService.listOrganizations.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {},
         *         {}
         *     ]
         * });
         * listOrganizationsCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<ListOrganizationsSchema, ListOrganizationsParameters, ListOrganizationsData, ListOrganizationsError>>, TCombinedResult = Array<UseQueryResult<ListOrganizationsData, ListOrganizationsError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<ListOrganizationsData, ListOrganizationsError>>) => TCombinedResult;
        }): TCombinedResult;
        /** @summary Get Organizations */
        getQueryKey(parameters: ListOrganizationsParameters | void): ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get Organizations
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.organizationsService.listOrganizations.useQuery()
         * ```
         */
        useQuery<TData = ListOrganizationsData>(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options?: Omit<UndefinedInitialDataOptions<ListOrganizationsData, ListOrganizationsError, TData, ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>>, "queryKey">): UseQueryResult<TData, ListOrganizationsError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Get Organizations
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query without parameters
         * ```ts
         * const { data, isLoading } = qraft.organizationsService.listOrganizations.useQuery()
         * ```
         */
        useQuery<TData = ListOrganizationsData>(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options: Omit<DefinedInitialDataOptions<ListOrganizationsData, ListOrganizationsError, TData, ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>>, "queryKey">): DefinedUseQueryResult<TData, ListOrganizationsError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.organizationsService.listOrganizations.useSuspenseInfiniteQuery({}, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends ListOrganizationsParameters, TData = ListOrganizationsData>(parameters: ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options: Omit<UseSuspenseInfiniteQueryOptions<ListOrganizationsData, ListOrganizationsError, OperationInfiniteData<TData, ListOrganizationsParameters>, ListOrganizationsData, ServiceOperationInfiniteQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<ListOrganizationsData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, ListOrganizationsParameters>, ListOrganizationsError | Error>;
        /** @summary Get Organizations */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<ListOrganizationsSchema, ListOrganizationsParameters, ListOrganizationsData, ListOrganizationsError>>, TCombinedResult = Array<UseSuspenseQueryResult<ListOrganizationsData, ListOrganizationsError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<ListOrganizationsData, ListOrganizationsError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /** @summary Get Organizations */
        useSuspenseQuery<TData = ListOrganizationsData>(parameters: ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters> | (ListOrganizationsParameters | void), options?: Omit<UseSuspenseQueryOptions<ListOrganizationsData, ListOrganizationsError, TData, ServiceOperationQueryKey<ListOrganizationsSchema, ListOrganizationsParameters>>, "queryKey">): UseSuspenseQueryResult<TData, ListOrganizationsError | Error>;
        schema: ListOrganizationsSchema;
        types: {
            parameters: ListOrganizationsParameters;
            data: ListOrganizationsData;
            error: ListOrganizationsError;
        };
    };
    /** @summary Create Organization */
    createOrganization: {
        /** @summary Create Organization */
        getMutationKey(parameters: CreateOrganizationParameters | void): ServiceOperationMutationKey<CreateOrganizationSchema, CreateOrganizationParameters>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.organizationsService.createOrganization.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.organizationsService.createOrganization.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends CreateOrganizationBody, TContext = unknown>(parameters: CreateOrganizationParameters, options?: ServiceOperationUseMutationOptions<CreateOrganizationSchema, CreateOrganizationData, CreateOrganizationParameters, TVariables, CreateOrganizationError | Error, TContext>): UseMutationResult<CreateOrganizationData, CreateOrganizationError | Error, AreAllOptional<TVariables> extends true ? TVariables | void : TVariables, TContext>;
        /**
         * Enables performing asynchronous data mutation operations such as POST, PUT, PATCH, or DELETE requests.
         * Handles loading state, optimistic updates, and error handling.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutation|`useMutation(...)` documentation}
         * @example Mutation with predefined parameters, e.g., for updating
         * ```ts
         * const { mutate, isPending } = qraft.organizationsService.createOrganization.useMutation({})
         * mutate(body);
         * ```
         * @example Mutation without predefined parameters, e.g., for creating
         * ```ts
         * const { mutate, isPending } = qraft.organizationsService.createOrganization.useMutation()
         * mutate({
         *     body: bodyPayload
         * });
         * ```
         */
        useMutation<TVariables extends MutationVariables<CreateOrganizationBody, CreateOrganizationParameters>, TContext = unknown>(parameters: void, options?: ServiceOperationUseMutationOptions<CreateOrganizationSchema, CreateOrganizationData, CreateOrganizationParameters, TVariables, CreateOrganizationError | Error, TContext>): UseMutationResult<CreateOrganizationData, CreateOrganizationError | Error, TVariables, TContext>;
        /**
         * Returns the count of currently in-progress mutations.
         *
         * @summary Create Organization
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsMutating|`useIsMutating(...)` documentation}
         * @example Check how many mutations are currently in progress for the specified service method.
         * ```ts
         * const createOrganizationTotal = qraft.organizationsService.createOrganization.useIsMutating()
         * ```
         * @example Check how many mutations are currently in progress with the specified parameters.
         * ```ts
         * const createOrganizationTotal = qraft.organizationsService.createOrganization.useIsMutating({
         *     parameters: {}
         * })
         * ```
         */
        useIsMutating<TContext = unknown>(filters?: MutationFiltersByParameters<CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext> | MutationFiltersByMutationKey<CreateOrganizationSchema, CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext>): number;
        /** @summary Create Organization */
        isMutating<TContext>(filters?: MutationFiltersByParameters<CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext> | MutationFiltersByMutationKey<CreateOrganizationSchema, CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext>): number;
        /** @summary Create Organization */
        (options: ServiceOperationMutationFnOptions<CreateOrganizationBody, CreateOrganizationParameters>, client?: (schema: CreateOrganizationSchema, options: ServiceOperationMutationFnOptions<CreateOrganizationBody, CreateOrganizationParameters>) => Promise<RequestFnResponse<CreateOrganizationData, CreateOrganizationError>>): Promise<RequestFnResponse<CreateOrganizationData, CreateOrganizationError>>;
        /**
         * Provides access to the current state of a mutation, including its status, any resulting data, and associated errors.
         *
         * @summary Create Organization
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useMutationState|`useMutationState(...)` documentation}
         * @example Get all variables of all running mutations.
         * ```ts
         * const createOrganizationPendingMutationVariables = qraft.organizationsService.createOrganization.useMutationState({
         *     filters: {
         *         status: "pending"
         *     },
         *     select: mutation => mutation.state.variables
         * })
         * ```
         * @example Get all data for specific mutations via the `parameters`.
         * ```ts
         * const createOrganizationMutationData = qraft.organizationsService.createOrganization.useMutationState({
         *     filters: {
         *         parameters: {}
         *     },
         *     select: mutation => mutation.state.data
         * })
         * ```
         */
        useMutationState<TContext = unknown, TResult = MutationState<CreateOrganizationData, CreateOrganizationError | Error, MutationVariables<CreateOrganizationBody, CreateOrganizationParameters>, TContext>>(options?: {
            filters?: MutationFiltersByParameters<CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext> | MutationFiltersByMutationKey<CreateOrganizationSchema, CreateOrganizationBody, CreateOrganizationData, CreateOrganizationParameters, CreateOrganizationError | Error, TContext>;
            select?: (mutation: Mutation<CreateOrganizationData, CreateOrganizationError | Error, MutationVariables<CreateOrganizationBody, CreateOrganizationParameters>, TContext>) => TResult;
        }): Array<TResult>;
        schema: CreateOrganizationSchema;
        types: {
            parameters: CreateOrganizationParameters;
            data: CreateOrganizationData;
            error: CreateOrganizationError;
            body: CreateOrganizationBody;
        };
    };
}
export const organizationsService: {
    /** @summary Get Organizations */
    listOrganizations: {
        schema: {
            method: "get";
            url: "/organizations";
        };
    };
    /** @summary Create Organization */
    createOrganization: {
        schema: {
            method: "post";
            url: "/organizations";
            mediaType: [
                "application/json"
            ];
        };
    };
} = {
    listOrganizations: {
        schema: {
            method: "get",
            url: "/organizations"
        }
    },
    createOrganization: {
        schema: {
            method: "post",
            url: "/organizations",
            mediaType: ["application/json"]
        }
    }
};
type ListOrganizationsSchema = {
    method: "get";
    url: "/organizations";
};
type ListOrganizationsParameters = undefined;
type ListOrganizationsData = paths["/organizations"]["get"]["responses"]["200"]["content"]["application/json"];
type ListOrganizationsError = unknown;
type CreateOrganizationSchema = {
    method: "post";
    url: "/organizations";
    mediaType: [
        "application/json"
    ];
};
type CreateOrganizationParameters = {};
type CreateOrganizationData = paths["/organizations"]["post"]["responses"]["201"]["content"]["application/json"];
type CreateOrganizationError = paths["/organizations"]["post"]["responses"]["422"]["content"]["application/json"];
type CreateOrganizationBody = NonNullable<paths["/organizations"]["post"]["requestBody"]>["content"]["application/json"];
