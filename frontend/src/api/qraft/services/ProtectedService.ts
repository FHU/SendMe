/**
 * This file was auto-generated by @openapi-qraft/cli.
 * Do not make direct changes to the file.
 */

import type { paths } from "../schema";
import type { InvalidateQueryFilters, OperationInfiniteData, PartialParameters, QueryFiltersByParameters, QueryFiltersByQueryKey, QueryFnOptionsByParameters, QueryFnOptionsByQueryKey, RequestFnResponse, ServiceOperationEnsureInfiniteQueryDataOptions, ServiceOperationEnsureQueryDataOptions, ServiceOperationFetchInfiniteQueryOptions, ServiceOperationFetchQueryOptions, ServiceOperationInfiniteQueryKey, ServiceOperationQueryKey, UseQueryOptionsForUseQueries, UseQueryOptionsForUseSuspenseQuery, WithOptional } from "@openapi-qraft/tanstack-query-react-types";
import type { CancelOptions, InfiniteQueryPageParamsOptions, InvalidateOptions, NoInfer, QueryState, RefetchOptions, ResetOptions, SetDataOptions, Updater } from "@tanstack/query-core";
import type { DefinedInitialDataInfiniteOptions, DefinedInitialDataOptions, DefinedUseInfiniteQueryResult, DefinedUseQueryResult, UndefinedInitialDataInfiniteOptions, UndefinedInitialDataOptions, UseInfiniteQueryResult, UseQueryResult, UseSuspenseInfiniteQueryOptions, UseSuspenseInfiniteQueryResult, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
export interface ProtectedService {
    /** @summary Protected Example */
    protectedExampleProtectedGet: {
        /** @summary Protected Example */
        cancelQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>, options?: CancelOptions): Promise<void>;
        /** @summary Protected Example */
        getQueryKey(parameters: ProtectedExampleProtectedGetParameters): ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Protected Example
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.protectedService.protectedExampleProtectedGet.useQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * })
         * ```
         */
        useQuery<TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options?: Omit<UndefinedInitialDataOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, TData, ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>>, "queryKey">): UseQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Protected Example
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.protectedService.protectedExampleProtectedGet.useQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * })
         * ```
         */
        useQuery<TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options: Omit<DefinedInitialDataOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, TData, ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>>, "queryKey">): DefinedUseQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /** @summary Protected Example */
        fetchInfiniteQuery<TPageParam extends ProtectedExampleProtectedGetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, TPageParam, ProtectedExampleProtectedGetError>): Promise<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>>;
        /** @summary Protected Example */
        prefetchInfiniteQuery<TPageParam extends ProtectedExampleProtectedGetParameters>(options: ServiceOperationFetchInfiniteQueryOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, TPageParam, ProtectedExampleProtectedGetError>): Promise<void>;
        /** @summary Protected Example */
        ensureInfiniteQueryData<TPageParam extends ProtectedExampleProtectedGetParameters>(options: ServiceOperationEnsureInfiniteQueryDataOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, TPageParam, ProtectedExampleProtectedGetError>): Promise<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>>;
        /** @summary Protected Example */
        fetchQuery(options: ServiceOperationFetchQueryOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): Promise<ProtectedExampleProtectedGetData>;
        /** @summary Protected Example */
        prefetchQuery(options: ServiceOperationFetchQueryOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): Promise<void>;
        /** @summary Protected Example */
        ensureQueryData(options: ServiceOperationEnsureQueryDataOptions<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): Promise<ProtectedExampleProtectedGetData>;
        /** @summary Protected Example */
        getInfiniteQueryData(parameters: ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters)): OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters> | undefined;
        /** @summary Protected Example */
        getQueriesData<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): TInfinite extends true ? Array<[
            queryKey: ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>,
            data: NoInfer<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>> | undefined
        ]> : Array<[
            queryKey: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>,
            data: ProtectedExampleProtectedGetData | undefined
        ]>;
        /** @summary Protected Example */
        getQueryData(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters)): ProtectedExampleProtectedGetData | undefined;
        /** @summary Protected Example */
        getQueryState(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters)): QueryState<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError> | undefined;
        /** @summary Protected Example */
        getInfiniteQueryState(parameters: ProtectedExampleProtectedGetParameters | ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>): QueryState<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>, ProtectedExampleProtectedGetError> | undefined;
        /** @summary Protected Example */
        invalidateQueries<TInfinite extends boolean = false>(filters?: InvalidateQueryFilters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>, options?: InvalidateOptions): Promise<void>;
        /** @summary Protected Example */
        isFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): number;
        /** @summary Protected Example */
        <TMeta extends Record<string, any>, TSignal extends AbortSignal = AbortSignal>(options: QueryFnOptionsByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters, TMeta, TSignal> | (QueryFnOptionsByParameters<ProtectedExampleProtectedGetParameters, TMeta, TSignal>), client?: (schema: ProtectedExampleProtectedGetSchema, options: {
            parameters: ProtectedExampleProtectedGetParameters;
            signal?: TSignal;
            meta?: TMeta;
        }) => Promise<RequestFnResponse<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>): Promise<RequestFnResponse<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>;
        /** @summary Protected Example */
        refetchQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>, options?: RefetchOptions): Promise<void>;
        /** @summary Protected Example */
        removeQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): void;
        /** @summary Protected Example */
        resetQueries<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>, options?: ResetOptions): Promise<void>;
        /** @summary Protected Example */
        setInfiniteQueryData(parameters: ProtectedExampleProtectedGetParameters | ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>, updater: Updater<NoInfer<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>> | undefined, NoInfer<OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters>> | undefined>, options?: SetDataOptions): OperationInfiniteData<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetParameters> | undefined;
        /** @summary Protected Example */
        setQueriesData<TInfinite extends boolean = false>(filters: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>, updater: Updater<NoInfer<ProtectedExampleProtectedGetData> | undefined, NoInfer<ProtectedExampleProtectedGetData> | undefined>, options?: SetDataOptions): Array<ProtectedExampleProtectedGetData | undefined>;
        /** @summary Protected Example */
        setQueryData(parameters: (ProtectedExampleProtectedGetParameters) | ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>, updater: Updater<NoInfer<ProtectedExampleProtectedGetData> | undefined, NoInfer<ProtectedExampleProtectedGetData> | undefined>, options?: SetDataOptions): ProtectedExampleProtectedGetData | undefined;
        /** @summary Protected Example */
        getInfiniteQueryKey(parameters: ProtectedExampleProtectedGetParameters): ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.protectedService.protectedExampleProtectedGet.useInfiniteQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends ProtectedExampleProtectedGetParameters, TQueryFnData = ProtectedExampleProtectedGetData, TData = OperationInfiniteData<TQueryFnData, ProtectedExampleProtectedGetParameters>>(parameters: ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options: Omit<UndefinedInitialDataInfiniteOptions<TQueryFnData, ProtectedExampleProtectedGetError, TData, ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<TQueryFnData, PartialParameters<TPageParam>>): UseInfiniteQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useInfiniteQuery|`useInfiniteQuery(...)` documentation}
         *
         * @example Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.protectedService.protectedExampleProtectedGet.useInfiniteQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useInfiniteQuery<TPageParam extends ProtectedExampleProtectedGetParameters, TQueryFnData = ProtectedExampleProtectedGetData, TData = OperationInfiniteData<TQueryFnData, ProtectedExampleProtectedGetParameters>>(parameters: ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options: Omit<DefinedInitialDataInfiniteOptions<TQueryFnData, ProtectedExampleProtectedGetError, TData, ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<ProtectedExampleProtectedGetData, PartialParameters<TPageParam>>): DefinedUseInfiniteQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /**
         * Monitors the number of queries currently fetching, matching the provided filters.
         * Useful for creating loading indicators or performing actions based on active requests.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useIsFetching|`useIsFetching(...)` documentation}
         * @example Checks the total number of queries fetching from the specified service method,
         * both normal and infinite. If no parameters are provided, no filtering is applied.
         * ```ts
         * const protectedExampleProtectedGetTotal = qraft.protectedService.protectedExampleProtectedGet.useIsFetching()
         * ```
         * @example Checks the number of normal queries fetching with the specified parameters.
         * ```ts
         * const protectedExampleProtectedGetByParametersTotal = qraft.protectedService.protectedExampleProtectedGet.useIsFetching({
         *     infinite: false,
         *     parameters: {
         *         header: {
         *             authorization: authorization
         *         }
         *     }
         * })
         * ```
         */
        useIsFetching<TInfinite extends boolean = false>(filters?: QueryFiltersByParameters<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError> | QueryFiltersByQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetData, TInfinite, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetError>): number;
        /**
         * Allows you to execute multiple asynchronous data fetching operations concurrently. This is especially useful for managing complex data dependencies in parallel.
         *
         * @summary Protected Example
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQueries|`useQueries(...)` documentation}
         * @example Multiple queries. Returns `data`, `error`, `isSuccess` and other properties.
         * ```ts
         * const protectedExampleProtectedGetResults = qraft.protectedService.protectedExampleProtectedGet.useQueries({
         *     queries: [
         *         {
         *             header: {
         *                 authorization: authorization1
         *             }
         *         },
         *         {
         *             header: {
         *                 authorization: authorization2
         *             }
         *         }
         *     ]
         * });
         * protectedExampleProtectedGetResults.forEach(({ isSuccess, data, error }) => console.log({ isSuccess, data, error }));
         * ```
         * @example Combined results. Only the data will be returned.
         * ```ts
         * const protectedExampleProtectedGetCombinedResults = qraft.protectedService.protectedExampleProtectedGet.useQueries({
         *     combine: results => results.map(result => result.data),
         *     queries: [
         *         {
         *             header: {
         *                 authorization: authorization1
         *             }
         *         },
         *         {
         *             header: {
         *                 authorization: authorization2
         *             }
         *         }
         *     ]
         * });
         * protectedExampleProtectedGetCombinedResults.forEach(data => console.log({ data }));
         * ```
         */
        useQueries<T extends Array<UseQueryOptionsForUseQueries<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>, TCombinedResult = Array<UseQueryResult<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>>(options: {
            queries: T;
            combine?: (results: Array<UseQueryResult<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>) => TCombinedResult;
        }): TCombinedResult;
        /** @summary Protected Example */
        getQueryKey(parameters: ProtectedExampleProtectedGetParameters): ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Protected Example
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.protectedService.protectedExampleProtectedGet.useQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * })
         * ```
         */
        useQuery<TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options?: Omit<UndefinedInitialDataOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, TData, ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>>, "queryKey">): UseQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /**
         * Performs asynchronous data fetching, manages loading states and error handling.
         *
         * @summary Protected Example
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useQuery|`useQuery(...)` documentation}
         * @example Query with parameters
         * ```ts
         * const { data, isLoading } = qraft.protectedService.protectedExampleProtectedGet.useQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * })
         * ```
         */
        useQuery<TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options: Omit<DefinedInitialDataOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, TData, ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>>, "queryKey">): DefinedUseQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        /**
         * Performs asynchronous data fetching with support for infinite scrolling scenarios.
         * Manages paginated data and provides utilities for fetching additional pages.
         * It functions similarly to `useInfiniteQuery`, but with added support for React Suspense.
         *
         * @see {@link https://openapi-qraft.github.io/openapi-qraft/docs/hooks/useSuspenseInfiniteQuery|`useSuspenseInfiniteQuery(...)` documentation}
         *
         * @example Suspense Infinite Query
         * ```ts
         * const { data, isLoading, fetchNextPage } = qraft.protectedService.protectedExampleProtectedGet.useSuspenseInfiniteQuery({
         *     header: {
         *         authorization: authorization
         *     }
         * }, {
         *     initialPageParam: {},
         *     getNextPageParam: (lastPage, allPages, lastPageParam, allPageParams) => getNextPageParams(lastPage)
         * })
         *
         * console.log(data);
         * fetchNextPage(); // Fetch the next page
         * ```
         */
        useSuspenseInfiniteQuery<TPageParam extends ProtectedExampleProtectedGetParameters, TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options: Omit<UseSuspenseInfiniteQueryOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, OperationInfiniteData<TData, ProtectedExampleProtectedGetParameters>, ProtectedExampleProtectedGetData, ServiceOperationInfiniteQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>, PartialParameters<TPageParam>>, "queryKey" | "getPreviousPageParam" | "getNextPageParam" | "initialPageParam"> & InfiniteQueryPageParamsOptions<ProtectedExampleProtectedGetData, PartialParameters<TPageParam>>): UseSuspenseInfiniteQueryResult<OperationInfiniteData<TData, ProtectedExampleProtectedGetParameters>, ProtectedExampleProtectedGetError | Error>;
        /** @summary Protected Example */
        useSuspenseQueries<T extends Array<UseQueryOptionsForUseSuspenseQuery<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters, ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>, TCombinedResult = Array<UseSuspenseQueryResult<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>>>(options: {
            queries: T;
            combine?: (results: Array<WithOptional<UseSuspenseQueryResult<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError>, "data">>) => TCombinedResult;
        }): TCombinedResult;
        /** @summary Protected Example */
        useSuspenseQuery<TData = ProtectedExampleProtectedGetData>(parameters: ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters> | (ProtectedExampleProtectedGetParameters), options?: Omit<UseSuspenseQueryOptions<ProtectedExampleProtectedGetData, ProtectedExampleProtectedGetError, TData, ServiceOperationQueryKey<ProtectedExampleProtectedGetSchema, ProtectedExampleProtectedGetParameters>>, "queryKey">): UseSuspenseQueryResult<TData, ProtectedExampleProtectedGetError | Error>;
        schema: ProtectedExampleProtectedGetSchema;
        types: {
            parameters: ProtectedExampleProtectedGetParameters;
            data: ProtectedExampleProtectedGetData;
            error: ProtectedExampleProtectedGetError;
        };
    };
}
export const protectedService: {
    /** @summary Protected Example */
    protectedExampleProtectedGet: {
        schema: {
            method: "get";
            url: "/protected";
        };
    };
} = {
    protectedExampleProtectedGet: {
        schema: {
            method: "get",
            url: "/protected"
        }
    }
};
type ProtectedExampleProtectedGetSchema = {
    method: "get";
    url: "/protected";
};
type ProtectedExampleProtectedGetParameters = paths["/protected"]["get"]["parameters"];
type ProtectedExampleProtectedGetData = paths["/protected"]["get"]["responses"]["200"]["content"]["application/json"];
type ProtectedExampleProtectedGetError = paths["/protected"]["get"]["responses"]["422"]["content"]["application/json"];
